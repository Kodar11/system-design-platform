generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  username            String             @unique
  password            String
  role                Role               @default(USER)
  subscriptionStatus  SubscriptionStatus @default(FREE)
  dailyDesignCredits  Int                @default(0)
  dailyProblemCredits Int                @default(0)
  lastCreditReset     DateTime           @default(now())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Design              Design[]
  logs                Log[]
  Payment             Payment[]
  Submission          Submission[]
}

model Otp {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  otp          String
  expiresAt    BigInt
  resendCount  Int      @default(1)
  tempUserData Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Plan {
  id             String    @id @default(uuid())
  name           String    @unique
  priceInPaisa   Int
  razorpayPlanId String    @unique
  payments       Payment[]
}

model Payment {
  id                     String        @id @default(uuid())
  userId                 String
  planId                 String
  razorpaySubscriptionId String?       @unique
  status                 PaymentStatus @default(PENDING)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  plan                   Plan          @relation(fields: [planId], references: [id])
  user                   User          @relation(fields: [userId], references: [id])
}

model Design {
  id          String   @id @default(uuid())
  userId      String
  name        String
  diagramData Json
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId, isDeleted])
  @@index([userId, createdAt])
}
model Problem {
  id                    String            @id @default(uuid())
  title                 String
  requirements          Json              
  initialRequirementsQa Json              
  interviewQuestions    Json              
  difficulty            Difficulty        @default(MEDIUM)
  isDeleted             Boolean           @default(false)
  submissions           Submission[]
  
  @@index([difficulty, isDeleted])
  @@index([isDeleted])
}

model Submission {
  id                    String            @id @default(uuid())
  userId                String  
  problemId             String
  submittedDiagramData  Json              
  submittedAnswers      Json              
  evaluationResult      Json              
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  problem               Problem           @relation(fields: [problemId], references: [id])
  user                  User              @relation(fields: [userId], references: [id])
  
  @@index([userId, createdAt])
  @@index([problemId])
  @@index([userId, problemId])
}
model Component {
  id               String  @id @default(uuid())
  name             String  @unique
  type             String
  iconUrl          String?
  documentationUrl String?
  metadata         Json
  isDeleted        Boolean @default(false)
  
  @@index([isDeleted])
  @@index([type, isDeleted])
}

model CloudService {
  // Primary ID for the KBS entry, matching the spreadsheet ID (e.g., aws-ec2-t3-medium-ondemand)
  id                    String      @id
  provider              String      // e.g., AWS, Azure
  category              String      // e.g., DATABASE, COMPUTE
  name                  String      // e.g., EC2 t3.medium
  term                  String      // e.g., On-Demand, 3-Year RI
  shortDescription      String?
  
  // Costing Fields
  pricingModelType      String      // e.g., RATE_HOURLY, AMORTIZE_UPFRONT (Used by algorithm to choose formula)
  monthlyRate           Float       // THE FINAL, PRE-CALCULATED, STANDARDIZED MONTHLY COST
  
  // Raw Data Fields (Used by script/logic to calculate monthlyRate)
  rawHourlyRate         Float?
  rawConsumptionRate    String?     // Stored as string to hold unit info (e.g., "0.25/million reads")
  upfrontFee            Float?
  termInMonths          Int?

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@unique([id, term])
  @@index([provider, category])
}

model Log {
  id           String   @id @default(uuid())
  userId       String
  action       String
  resourceType String
  resourceId   String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  CONTENT_ADDER
}

enum SubscriptionStatus {
  FREE
  PRO
  TEAM
  CANCELLED
}

enum PaymentStatus {
  PENDING
  ACTIVE
  CANCELLED
  FAILED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
