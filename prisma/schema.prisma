generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  username            String             @unique
  password            String
  role                Role               @default(USER)
  subscriptionStatus  SubscriptionStatus @default(FREE)
  dailyDesignCredits  Int                @default(0)
  dailyProblemCredits Int                @default(0)
  lastCreditReset     DateTime           @default(now())
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  Design              Design[]
  logs                Log[]
  Payment             Payment[]
  Submission          Submission[]
}

model Otp {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  otp          String
  expiresAt    BigInt
  resendCount  Int      @default(1)
  tempUserData Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Plan {
  id             String    @id @default(uuid())
  name           String    @unique
  priceInPaisa   Int
  razorpayPlanId String    @unique
  payments       Payment[]
}

model Payment {
  id                     String        @id @default(uuid())
  userId                 String
  planId                 String
  razorpaySubscriptionId String?       @unique
  status                 PaymentStatus @default(PENDING)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  plan                   Plan          @relation(fields: [planId], references: [id])
  user                   User          @relation(fields: [userId], references: [id])
}

model Design {
  id          String   @id @default(uuid())
  userId      String
  name        String
  diagramData Json
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Problem {
  id           String       @id @default(uuid())
  title        String
  requirements Json
  difficulty   Difficulty   @default(MEDIUM)
  isDeleted    Boolean      @default(false)
  submissions  Submission[]
}

model Submission {
  id                   String   @id @default(uuid())
  userId               String
  problemId            String
  submittedDiagramData Json
  evaluationResult     Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  problem              Problem  @relation(fields: [problemId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
}

model Component {
  id               String  @id @default(uuid())
  name             String  @unique
  type             String
  iconUrl          String?
  documentationUrl String?
  metadata         Json
  isDeleted        Boolean @default(false)
}

model Log {
  id           String   @id @default(uuid())
  userId       String
  action       String
  resourceType String
  resourceId   String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
  CONTENT_ADDER
}

enum SubscriptionStatus {
  FREE
  PRO
  TEAM
  CANCELLED
}

enum PaymentStatus {
  PENDING
  ACTIVE
  CANCELLED
  FAILED
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
